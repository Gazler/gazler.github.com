<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: backbone.js | Gazler]]></title>
  <link href="http://Gazler.github.com/blog/categories/backbone-js/atom.xml" rel="self"/>
  <link href="http://Gazler.github.com/"/>
  <updated>2017-08-29T17:44:23+01:00</updated>
  <id>http://Gazler.github.com/</id>
  <author>
    <name><![CDATA[Gary Rennie]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Writing a Demo Mode in Backbone]]></title>
    <link href="http://Gazler.github.com/blog/2012/11/19/writing-a-demo-mode-in-backbone-by-overwriting-fetch-and-save/"/>
    <updated>2012-11-19T18:59:00+00:00</updated>
    <id>http://Gazler.github.com/blog/2012/11/19/writing-a-demo-mode-in-backbone-by-overwriting-fetch-and-save</id>
    <content type="html"><![CDATA[<h2>Background</h2>

<p>When writing an application in Backbone, it is highly likely that you utilize <a href="http://backbonejs.org/#Collection-fetch">fetch()</a> to retrieve data from your web server and <a href="http://backbonejs.org/#Model-save">save()</a> to store data on it.  This is exactly what we did for <a href="http://upti.lt">Uptilt</a> our entry for the Rails Rumble 2012 (the making of you can read about on <a href="http://uptiltgame.tumblr.com/">the Uptilt Blog</a>).</p>

<p>One of the key issues with Uptilt being a two player game is that it needs two people to play the game.  The solution to this is to use a demo (or practice) mode.  In the case of Uptilt, this involved implementing the game rules for card comparison client-side.  We also didn't want any interaction with the server when the practice game is in progress as the game is not recorded in the database.</p>

<!-- more -->


<h2>Overwriting fetch() and save()</h2>

<p>As is the case in most Backbone applications, we have an init function defined in the namespace which starts everything off (sets up the collections and renders the first views.)</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">uptilt</span><span class="p">.</span><span class="nx">init</span><span class="p">({</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nx">game_id</span><span class="o">:</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span><span class="o">%=</span><span class="err">@</span><span class="nx">game</span><span class="p">.</span><span class="nx">id</span><span class="o">%&amp;</span><span class="nx">gt</span><span class="p">;,</span>
</span><span class='line'><span class="c1">//Lots of other data</span>
</span><span class='line'><span class="nx">timer</span><span class="o">:</span> <span class="mi">30</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This is the only code needed from the HTML to pass all the data through to the Backbone application and get things started.  The init function looks something like:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">init</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">options</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">em</span><span class="o">&gt;</span><span class="p">.</span><span class="nx">bindAll</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="err">/em&gt;.extend(this, Backbone.Events);&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="k">this</span><span class="p">.</span><span class="nx">first_card</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Uptilt</span><span class="p">.</span><span class="nx">Models</span><span class="p">.</span><span class="nx">Card</span><span class="p">(</span><span class="nx">options</span><span class="p">.</span><span class="nx">first_card</span><span class="p">);</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">player</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Uptilt</span><span class="p">.</span><span class="nx">Models</span><span class="p">.</span><span class="nx">Player</span><span class="p">(</span><span class="nx">options</span><span class="p">.</span><span class="nx">player</span><span class="p">);</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">opponent</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Uptilt</span><span class="p">.</span><span class="nx">Models</span><span class="p">.</span><span class="nx">Player</span><span class="p">(</span><span class="nx">options</span><span class="p">.</span><span class="nx">opponent</span><span class="p">);</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="nb">window</span><span class="p">.</span><span class="nx">notifier</span><span class="p">.</span><span class="nx">subscribe</span><span class="p">(</span><span class="nx">options</span><span class="p">.</span><span class="nx">channel</span><span class="p">);</span>
</span><span class='line'>  <span class="nb">window</span><span class="p">.</span><span class="nx">notifier</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s2">&quot;connected&quot;</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">startGame</span><span class="p">);</span>
</span><span class='line'><span class="p">},</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The important points are that:</p>

<ul>
<li>There are some variables that are set to some values passed through from the HTML call to the init function</li>
<li>The notifier (which I have <a href="http://blog.gazler.com/blog/2012/04/02/making-backbone-applications-realtime-with-pusher/">posted about before</a> will trigger the preload function when connected is called.</li>
</ul>


<p>Here is the startGame function:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">startGame</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">board</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Uptilt</span><span class="p">.</span><span class="nx">Views</span><span class="p">.</span><span class="nx">Board</span><span class="p">();</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#main&quot;</span><span class="p">).</span><span class="nx">append</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">board</span><span class="p">.</span><span class="nx">render</span><span class="p">().</span><span class="nx">el</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The specifics about the internals are unimportant except for the following points:</p>

<ul>
<li>When a user makes a turn, a <code>save()</code> is called on an instance of Uptilt.Models.Turn</li>
<li>When a new card is required a <code>fetch()</code> is called on an instance of Uptilt.Models.card and the server sends a new card to the player</li>
</ul>


<p> Since these are the only two interactions with the server, the game could be implemented client-side by storing the state of the game on the client (since this is a one-player mode, cheating isn't an issue, you are only cheating yourself!)</p>

<p> The first step in doing so is to call a new method instead of init when the page loads:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">Uptilt</span><span class="p">.</span><span class="nx">practice</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">cards</span><span class="o">:</span> <span class="c1">//cards JSON (of 30 cards)</span>
</span><span class='line'>  <span class="nx">player</span><span class="o">:</span> <span class="c1">//player JSON</span>
</span><span class='line'>  <span class="nx">opponent</span><span class="o">:</span> <span class="c1">//opponent JSON</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The practice code looks like this:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'>  <span class="nx">practice</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">options</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nb">window</span><span class="p">.</span><span class="nx">notifier</span><span class="p">.</span><span class="nx">subscribe</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{};</span>
</span><span class='line'><span class="k">this</span><span class="p">.</span><span class="nx">cards</span> <span class="o">=</span> <span class="nx">options</span><span class="p">.</span><span class="nx">cards</span><span class="p">;</span>
</span><span class='line'><span class="p">[</span><span class="k">this</span><span class="p">.</span><span class="nx">playerCards</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">opponentCards</span><span class="p">]</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">shuffleCards</span><span class="p">();</span>
</span><span class='line'><span class="nx">options</span><span class="p">.</span><span class="nx">first_card</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">playerCards</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'><span class="k">this</span><span class="p">.</span><span class="nx">practiceModels</span><span class="p">();</span>
</span><span class='line'><span class="k">this</span><span class="p">.</span><span class="nx">init</span><span class="p">(</span><span class="nx">options</span><span class="p">);</span>
</span><span class='line'><span class="k">this</span><span class="p">.</span><span class="nx">startGame</span><span class="p">();</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">},</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>You will notice that this code is responsible for:</p>

<ul>
<li>Stubbing out the notifier (No push notifications are required in a single player game)</li>
<li>Setting up the initial card state</li>
<li>Overriding the first_card variable that init expects.</li>
<li>Calling init</li>
<li>Manually calling startGame (Since the connected message on the notifier will never trigger)</li>
</ul>


<p> The most important method here is the practiceModels method, which looks like:</p>

<p> <div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">practiceModels</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">self</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">Uptilt</span><span class="p">.</span><span class="nx">Models</span><span class="p">.</span><span class="nx">Turn</span> <span class="o">=</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">Model</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nx">save</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">self</span><span class="p">.</span><span class="nx">determineOutcome</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s2">&quot;move&quot;</span><span class="p">).</span><span class="nx">rule_key</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">});</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="nx">Uptilt</span><span class="p">.</span><span class="nx">Models</span><span class="p">.</span><span class="nx">Card</span> <span class="o">=</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">Model</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nx">fetch</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">attributes</span> <span class="o">=</span> <span class="nx">self</span><span class="p">.</span><span class="nx">playerCards</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">trigger</span><span class="p">(</span><span class="s2">&quot;change&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">});</span>
</span><span class='line'><span class="p">},</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p> This function overrides the save method of Turn (that is what is called when a user clicks on their chosen attribute in the game of Uptilt) and instead calls determineOutcome (which is not shown but it is where the game logic is called client-side) emulating the code that is called on the server in a "real" game of Uptilt.</p>

<p> It also overrides the fetch method of Card.  In Uptilt, a player can only see their current card to prevent a user being able to work out the cards that the opponent has in their hand.  In the case of the client, this is simply the card at the top of the players pile.  Triggering the "change" event is important as that is what the views are listening to and they will re-render accordingly.</p>

<h2>The Results</h2>

<p>That is all I had to do to make the game playable on the client side.  The entire commit was about 100 lines of JavaScript and not a single view had to be modified.  This same technique could be used to implement a tutorial style introduction to your site with ease.</p>

<p>Does it work?  Why not try out a <a href="http://upti.lt/decks/3/practice">practice game</a> of Uptilt and see for yourself.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Adding Validations To Your Backbone Models]]></title>
    <link href="http://Gazler.github.com/blog/2012/01/31/adding-validations-to-your-backbone-models/"/>
    <updated>2012-01-31T21:42:00+00:00</updated>
    <id>http://Gazler.github.com/blog/2012/01/31/adding-validations-to-your-backbone-models</id>
    <content type="html"><![CDATA[<p><a href="http://documentcloud.github.com/backbone/">Backbone.js</a> is a JavaScript framework that gives your code a much needed structure.  This post will advise you on how to extend the framework by adding in validators.  I will assume you have atleast a basic knowledge of Backbone.</p>

<h2>Source</h2>

<p>The source code for this post is <a href="http://github.com/Gazler/backbone_validators">available on gitub.</a></p>

<h2>The Goal</h2>

<p>While Backbone does give your project structure, it does not give you the full feature set that you require to build a web application.  Many methods are deliberately stubbed out and you are encouraged to fill in the blanks to give you the desired functionality.  One such method is the <a href="http://documentcloud.github.com/backbone/#Model-validate">validate</a> method on a Backbone Model.</p>

<p>The validate method is called every time <code>set</code> or <code>save</code> is called on a model.  The aim here is to override the validate method to use an object defined on the model and use this for validation.  We will also add an errors hash to the model which can be displayed to the user.</p>

<!-- more -->


<h2>Preperations</h2>

<p>Validations are perfect for unit testing, you have an input and a desired output and not much in between.  I will be using Jasmine for this purpose.  The first step is to <a href="http://pivotal.github.com/jasmine/download.html">download the spec runner</a>.  You can then extract it and locate the SpecRunner.</p>

<p>After downloading, delete the two files <code>PlayerSpec.js</code> and <code>SpecHelper.js</code> and create a new file <code>validator_spec.js</code>.  Then go into the src folder and delete <code>Player.js</code> and <code>Song.js</code>, you should also create a file <code>backbone_validator.js</code>.</p>

<p>We will also need <a href="http://documentcloud.github.com/backbone/">Backbone.js (0.9.0)</a> and <a href="http://documentcloud.github.com/underscore/">Underscore.js</a>, put these files inside the <code>lib</code> folder.</p>

<p><strong>Optionally</strong> you should include some internationalization of some sort for the error messages.  I strongly suggest <a href="https://github.com/fnando/i18n-js">i18n-js</a>.  You can download the required javascript <a href="https://github.com/fnando/i18n-js/blob/master/vendor/assets/javascripts/i18n.js">here</a>.</p>

<p>Finally, the file <code>SpecRunner.html</code> needs to be modified to reference the files you created. It should look like the following:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>SpecRunner.html </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;shortcut icon&quot;</span> <span class="na">type=</span><span class="s">&quot;image/png&quot;</span> <span class="na">href=</span><span class="s">&quot;lib/jasmine-1.1.0.rc1/jasmine_favicon.png&quot;</span><span class="nt">&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">type=</span><span class="s">&quot;text/css&quot;</span> <span class="na">href=</span><span class="s">&quot;lib/jasmine-1.1.0.rc1/jasmine.css&quot;</span><span class="nt">&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span> <span class="na">src=</span><span class="s">&quot;lib/jasmine-1.1.0.rc1/jasmine.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span> <span class="na">src=</span><span class="s">&quot;lib/jasmine-1.1.0.rc1/jasmine-html.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span> <span class="na">src=</span><span class="s">&quot;lib/i18n.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span> <span class="na">src=</span><span class="s">&quot;lib/underscore.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span> <span class="na">src=</span><span class="s">&quot;lib/backbone.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c">&lt;!-- include source files here... --&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span> <span class="na">src=</span><span class="s">&quot;src/backbone_validator.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c">&lt;!-- include spec files here... --&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span> <span class="na">src=</span><span class="s">&quot;spec/validator_spec.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Getting Started</h2>

<p>If you have read any Backbone tutorials, most will recommend that you namespace your application.  For this application, I am going to use <code>Gazler</code> as the namespace, you can pick whatever you like.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>src/backbone_validator.js </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">I18n</span><span class="p">.</span><span class="nx">translations</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'><span class="nx">I18n</span><span class="p">.</span><span class="nx">translations</span><span class="p">[</span><span class="s2">&quot;en&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;errors&quot;</span><span class="o">:</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="s2">&quot;form&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;required&quot;</span><span class="o">:</span> <span class="s2">&quot;is required&quot;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="kd">var</span> <span class="nx">Gazler</span> <span class="o">=</span> <span class="p">{};</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">Gazler</span><span class="p">.</span><span class="nx">Model</span> <span class="o">=</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">Model</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">validates</span><span class="o">:</span> <span class="p">{},</span>
</span><span class='line'>  <span class="nx">errors</span><span class="o">:</span> <span class="p">{},</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="nx">validate</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">changedAttributes</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="k">this</span><span class="p">.</span><span class="nx">errors</span> <span class="o">=</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">Validate</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="nx">changedAttributes</span><span class="p">);</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">_</span><span class="p">.</span><span class="nx">isEmpty</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">errors</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">errors</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">Backbone</span><span class="p">.</span><span class="nx">Validate</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">model</span><span class="p">,</span> <span class="nx">changedAttributes</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>A few things of not here:</p>

<ul>
<li>We have bootstapped a model here, this is all we will have to touch on Gazler.Model</li>
<li>Validate only returns if there are errors, Backbone will not continue with the save action if validate returns <strong>anything</strong></li>
<li>We have added an empty validates hash, this will be where we store our rules.</li>
<li>We have added some strings at the top, normally these would be generated from the language file you are using (<strong>config/locales</strong> in ruby)</li>
</ul>


<p>With everything ready to go, we can write our first test.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>validator_spec.js </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">describe</span><span class="p">(</span><span class="s2">&quot;Model Validations&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="nx">beforeEach</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="c1">//instantiate a model</span>
</span><span class='line'><span class="k">this</span><span class="p">.</span><span class="nx">model</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Gazler</span><span class="p">.</span><span class="nx">Model</span><span class="p">();</span>
</span><span class='line'><span class="c1">//A Url property must be specified</span>
</span><span class='line'><span class="k">this</span><span class="p">.</span><span class="nx">model</span><span class="p">.</span><span class="nx">url</span> <span class="o">=</span> <span class="s2">&quot;/&quot;</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">});</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="nx">describe</span><span class="p">(</span><span class="s2">&quot;required&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nx">it</span><span class="p">(</span><span class="s2">&quot;should add an error when a required field is blank&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">model</span><span class="p">.</span><span class="nx">validates</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">required</span><span class="o">:</span> <span class="p">[</span><span class="s2">&quot;name&quot;</span><span class="p">]</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">model</span><span class="p">.</span><span class="nx">validate</span><span class="p">();</span>
</span><span class='line'>  <span class="nx">expect</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">model</span><span class="p">.</span><span class="nx">errors</span><span class="p">).</span><span class="nx">toEqual</span><span class="p">({</span><span class="s2">&quot;name&quot;</span><span class="o">:</span> <span class="p">[</span><span class="s2">&quot;is required&quot;</span><span class="p">]});</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">});</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This should be pretty self explanatory, the key part here is that we add the validates hash to the model before each test and then call validate. We then simply check the errors hash against what we expect it to output.  If you open <code>SpecHelper.html</code> then you should see that this test is failing.</p>

<p>To make this test pass, we need to run through the rules specified in the validates hash and see if any of them have been broken.  In order to do this, we need to add some code to the Backbone.Validate method.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>backbone_validator.js </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">Backbone</span><span class="p">.</span><span class="nx">Validate</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">model</span><span class="p">,</span> <span class="nx">changedAttributes</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="k">return</span> <span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="k">this</span><span class="p">.</span><span class="nx">errors</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'><span class="k">this</span><span class="p">.</span><span class="nx">attributes</span> <span class="o">=</span> <span class="nx">_</span><span class="p">.</span><span class="nx">clone</span><span class="p">(</span><span class="nx">model</span><span class="p">.</span><span class="nx">attributes</span><span class="p">);</span>
</span><span class='line'><span class="nx">_</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">attributes</span><span class="p">,</span> <span class="nx">changedAttributes</span><span class="p">);</span>
</span><span class='line'><span class="nx">_</span><span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="nx">model</span><span class="p">.</span><span class="nx">validates</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">value</span><span class="p">,</span> <span class="nx">rule</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">validators</span><span class="p">[</span><span class="nx">rule</span><span class="p">](</span><span class="nx">value</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="k">this</span><span class="p">.</span><span class="nx">validators</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">required</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">fields</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>   <span class="nx">_</span><span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="nx">fields</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">field</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="nx">_</span><span class="p">.</span><span class="nx">isEmpty</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">attributes</span><span class="p">[</span><span class="nx">field</span><span class="p">])</span> <span class="o">===</span> <span class="kc">true</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">addError</span><span class="p">(</span><span class="nx">field</span><span class="p">,</span> <span class="nx">I18n</span><span class="p">.</span><span class="nx">t</span><span class="p">(</span><span class="s1">&#39;errors.form.required&#39;</span><span class="p">));</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">this</span><span class="p">.</span><span class="nx">addError</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">field</span><span class="p">,</span> <span class="nx">message</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">_</span><span class="p">.</span><span class="nx">isUndefined</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">errors</span><span class="p">[</span><span class="nx">field</span><span class="p">]))</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">errors</span><span class="p">[</span><span class="nx">field</span><span class="p">]</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">errors</span><span class="p">[</span><span class="nx">field</span><span class="p">].</span><span class="nx">push</span><span class="p">(</span><span class="nx">message</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">errors</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">})();</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>That code block can be quite a lot to take in, but I'll try to explain it.  The first thing to not is that it returns the results of a self-invoked function.  The reason for this is to keep the scope of this throughout the Validate method.</p>

<p>Inside this function, we maintain our own references to errors and attributes.  This is because we don't want to do anything that could affect the values that are on the model, which is not the goal, we want to let Backbone deal with that.  We use the clone method of underscore to keep our own reference.</p>

<p>Using the extend method of Underscore, the changedAttributes are merged into our attributes reference, this means that <code>this.attributes</code> contains all the attributes present <strong>before</strong> validate was called, and the new ones too.</p>

<p>The code on line 7 is used to call a methods defined in the <code>this.validators</code> hash.  Currently there is only one method defined there, but we will expand that in the future and add more validators, such as numericality or format.</p>

<p>As required is the easiest method, that is the first one to implement,  Simply using the <code>_.isEmpty()</code> method, you can determine if a required field is present or not.  if it is not present, there is a small helper method to push the error onto the errors object.</p>

<p>If you re-run the test(s) now then you will see that our single test is passing.</p>

<h2>Wrapping up</h2>

<p>There are two more tests that we should add before we are done with the required method.  Both should go inside the describe("required") block.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>validator_spec.js </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nx">it</span><span class="p">(</span><span class="s2">&quot;should allow required on more than one field&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">model</span><span class="p">.</span><span class="nx">validates</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">required</span><span class="o">:</span> <span class="p">[</span><span class="s2">&quot;name&quot;</span><span class="p">,</span> <span class="s2">&quot;description&quot;</span><span class="p">]</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">model</span><span class="p">.</span><span class="nx">validate</span><span class="p">();</span>
</span><span class='line'>  <span class="nx">expect</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">model</span><span class="p">.</span><span class="nx">errors</span><span class="p">).</span><span class="nx">toEqual</span><span class="p">({</span><span class="s2">&quot;name&quot;</span><span class="o">:</span> <span class="p">[</span><span class="s2">&quot;is required&quot;</span><span class="p">],</span> <span class="s2">&quot;description&quot;</span><span class="o">:</span> <span class="p">[</span><span class="s2">&quot;is required&quot;</span><span class="p">]});</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">it</span><span class="p">(</span><span class="s2">&quot;should not return anything if there are no required fields&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">expect</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">model</span><span class="p">.</span><span class="nx">validate</span><span class="p">()).</span><span class="nx">toEqual</span><span class="p">(</span><span class="kc">undefined</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>These two tests should be fairly obvious in they're purpose.  One thing of not is in the test with no required fields, we are testing that the validate method returns undefined.  As mentioned earlier, this is because Backbone required you to not return anything if you want to continue with the set/save after validating.</p>

<p>That is it for part 1.  We will take this concept further in part 2.</p>
]]></content>
  </entry>
  
</feed>
